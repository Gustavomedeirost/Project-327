Para criar um projeto web simples que exibe gráficos e tabelas usando Flask, Matplotlib e Plotly, vamos seguir um passo a passo. O projeto terá a seguinte estrutura:

1. **Configuração do Ambiente**: Instalação das bibliotecas necessárias.
2. **Estrutura do Projeto**: Organização dos arquivos e diretórios.
3. **Implementação do Backend com Flask**: Criação das rotas e lógica de manipulação de dados.
4. **Criação das Visualizações com Matplotlib e Plotly**: Geração de gráficos e tabelas.
5. **Execução do Projeto**: Como rodar a aplicação.

### 1. Configuração do Ambiente

Primeiro, você precisa ter o Python 3 instalado. Depois, crie um ambiente virtual e instale as bibliotecas necessárias:

```bash
# Criação do ambiente virtual
python3 -m venv venv
source venv/bin/activate  # No Windows use: venv\Scripts\activate

# Instalação das bibliotecas
pip install Flask matplotlib plotly pandas
```

### 2. Estrutura do Projeto

Crie a seguinte estrutura de diretórios e arquivos:

```
dashboard/
│
├── app.py
├── static/
│   ├── style.css
│
├── templates/
│   ├── index.html
│   └── graph.html
└── data/
    ├── sample_data.csv
```

### 3. Implementação do Backend com Flask

No arquivo `app.py`, vamos configurar o Flask e criar as rotas necessárias.

```python
from flask import Flask, render_template, jsonify
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import os

app = Flask(__name__)

# Carregar dados
data_path = os.path.join('data', 'sample_data.csv')
data = pd.read_csv(data_path)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/data')
def get_data():
    # Retornar dados em formato JSON
    return jsonify(data.to_dict(orient='records'))

@app.route('/plot')
def plot():
    # Criar um gráfico com Plotly
    fig = px.line(data, x='Date', y='Value', title='Gráfico de Valores ao Longo do Tempo')
    graph_html = fig.to_html(full_html=False)
    return render_template('graph.html', graph_html=graph_html)

if __name__ == '__main__':
    app.run(debug=True)
```

### 4. Criação das Visualizações

Vamos criar dois arquivos HTML: `index.html` e `graph.html` na pasta `templates`.

#### `index.html`

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <title>Dashboard de Dados</title>
</head>
<body>
    <h1>Dashboard de Dados</h1>
    <button onclick="window.location.href='/plot'">Ver Gráfico</button>
    <div id="data-table">
        <h2>Tabela de Dados</h2>
        <table id="table-data" border="1">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <script>
        fetch('/data')
            .then(response => response.json())
            .then(data => {
                const tableBody = document.querySelector('#table-data tbody');
                data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `<td>${row.Date}</td><td>${row.Value}</td>`;
                    tableBody.appendChild(tr);
                });
            });
    </script>
</body>
</html>
```

#### `graph.html`

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gráfico</title>
</head>
<body>
    <h1>Gráfico de Valores</h1>
    <div>{{ graph_html | safe }}</div>
    <button onclick="window.location.href='/'">Voltar ao Dashboard</button>
</body>
</html>
```

### 5. Execução do Projeto

Para rodar a aplicação, execute o seguinte comando no terminal:

```bash
python app.py
```

Acesse `http://127.0.0.1:5000/` no seu navegador. Você verá um botão para visualizar o gráfico e uma tabela com os dados.

### Conclusão

Este projeto básico de dashboard com Flask, Matplotlib e Plotly serve como um ponto de partida. Você pode expandir a funcionalidade, adicionar autenticação, mais gráficos, filtros e muito mais, conforme suas necessidades.